"""
Simple generation provider for the knowledge base system.

This provider is intended for testing and development purposes.
It returns predefined responses without calling external APIs.
"""

import asyncio
from typing import AsyncIterator, List, Optional

from ...core.config import Config
from ..generator import GenerationProvider


class SimpleProvider(GenerationProvider):
    """Simple generation provider for testing and development."""

    def __init__(self, config: Config):
        """Initialize the simple generation provider.

        Args:
            config: The system configuration.
        """
        super().__init__(config)
        self.delay = getattr(self.config.generation, "simple_delay", 0.1)

    async def generate(self, prompt: str) -> str:
        """Generate a response for the given prompt.

        This method returns a simple response based on the prompt.

        Args:
            prompt: The prompt to generate a response for.

        Returns:
            A simple response.
        """
        # Extract the question from the prompt
        question_parts = prompt.split("Question:")
        if len(question_parts) > 1:
            question = question_parts[-1].strip().split("\n")[0].strip()
        else:
            question = prompt.strip()
        
        # Generate a simple response
        response = f"This is a simple response to your question: '{question}'. "
        response += "This response is generated by the SimpleProvider for testing purposes. "
        response += "In a real application, this would be replaced by a response from an actual language model."
        
        # Simulate processing delay
        await asyncio.sleep(self.delay)
        
        return response

    async def generate_stream(self, prompt: str) -> AsyncIterator[str]:
        """Generate a streaming response for the given prompt.

        This method returns a simple response in chunks to simulate streaming.

        Args:
            prompt: The prompt to generate a response for.

        Returns:
            An async iterator of response chunks.
        """
        # Get the full response
        full_response = await self.generate(prompt)
        
        # Split into words to simulate streaming
        words = full_response.split()
        
        # Stream words with a delay
        for i in range(0, len(words), 3):
            chunk = " ".join(words[i:i+3])
            if i > 0:
                chunk = " " + chunk
            yield chunk
            await asyncio.sleep(self.delay)